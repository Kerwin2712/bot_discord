# Archivo: views/main_menu.py
# Contiene las clases de vista (botones) para el men√∫ principal del bot.

import discord
import asyncio
import config # Importa la configuraci√≥n para acceder a user_conversations

# Ya no necesitamos importar DBManager aqu√≠, ya que la l√≥gica de recursos
# y sus interacciones se manejar√°n directamente en el cog de Resources.

class MainMenuView(discord.ui.View):
    """
    Vista del men√∫ principal del bot, presentando opciones iniciales con botones.
    """
    def __init__(self, bot):
        super().__init__(timeout=180) # 3 minutos de timeout para la interacci√≥n
        self.bot = bot
        self.message = None # Para almacenar el mensaje

    async def on_timeout(self):
        """
        Se ejecuta cuando el tiempo de espera de la vista ha expirado.
        Deshabilita todos los botones.
        """
        for item in self.children:
            item.disabled = True
        if self.message:
            try:
                # No eliminar el mensaje, solo deshabilitar los botones
                await self.message.edit(content="La interacci√≥n ha expirado. Puedes usar `&iniciar` para mostrarlo de nuevo.", view=self)
            except discord.NotFound:
                print("Mensaje de MainMenuView no encontrado al intentar editar en timeout.")
            except Exception as e:
                print(f"Error al editar mensaje de MainMenuView en timeout: {e}")

    @discord.ui.button(label="Ayuda T√©cnica", style=discord.ButtonStyle.primary, custom_id="technical_help", emoji="üõ†Ô∏è")
    async def technical_help_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """
        Maneja la interacci√≥n cuando se hace clic en el bot√≥n 'Ayuda T√©cnica'.
        Informa al usuario sobre c√≥mo obtener ayuda t√©cnica sin crear un canal.
        """
        await interaction.response.defer() # Deferir la respuesta para evitar "Unknown interaction"

        # Deshabilita los botones del men√∫ principal para esta interacci√≥n
        for item in self.children:
            item.disabled = True
        await interaction.message.edit(content="Has seleccionado 'Ayuda T√©cnica'.", view=self)

        # Enviar un mensaje al usuario indicando c√≥mo proceder
        await interaction.followup.send(
            "Para obtener ayuda t√©cnica, por favor, describe tu problema detalladamente en este chat. "
            "Un miembro de nuestro equipo de soporte ser√° notificado y te asistir√° lo antes posible.",
            ephemeral=False # Para que el mensaje sea visible para otros si es un canal p√∫blico
        )
        print(f"Usuario {interaction.user.name} solicit√≥ Ayuda T√©cnica.")


    @discord.ui.button(label="Necesito un Recurso", style=discord.ButtonStyle.success, custom_id="request_resource", emoji="üìö")
    async def request_resource_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """
        Maneja la interacci√≥n cuando se hace clic en el bot√≥n 'Necesito un Recurso'.
        Inicia el flujo de selecci√≥n de recursos delegando al cog de Resources.
        """
        await interaction.response.defer() # Deferir la respuesta

        # Deshabilita los botones del men√∫ principal para esta interacci√≥n
        for item in self.children:
            item.disabled = True
        await interaction.message.edit(content="Has seleccionado 'Necesito un Recurso'. Iniciando el flujo de b√∫squeda...", view=self)

        # Llama al m√©todo del cog de Resources para iniciar la selecci√≥n de dificultad
        resources_cog = self.bot.get_cog("Resources")
        if resources_cog:
            await resources_cog.send_difficulty_selection(interaction)
        else:
            await interaction.followup.send("‚ùå Error interno: El m√≥dulo de recursos no est√° cargado. Contacta a un administrador.", ephemeral=True)
        print(f"Usuario {interaction.user.name} solicit√≥ un Recurso.")


    @discord.ui.button(label="Hablar con un Humano", style=discord.ButtonStyle.danger, custom_id="human_contact", emoji="üôã")
    async def human_contact_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """
        Maneja la interacci√≥n cuando se hace clic en el bot√≥n 'Hablar con un Humano'.
        Inicia un flujo de preguntas para recopilar informaci√≥n, gestionado por el cog de interacci√≥n humana.
        """
        await interaction.response.defer() # Deferir la interacci√≥n

        # Deshabilita los botones del men√∫ principal para esta interacci√≥n
        for item in self.children:
            item.disabled = True
        await interaction.message.edit(content="Has seleccionado 'Hablar con un Humano'. Iniciando conversaci√≥n...", view=self)

        user_id = interaction.user.id
        if user_id in config.user_conversations and config.user_conversations[user_id]['state'] != 0:
            await interaction.followup.send("Ya tienes una conversaci√≥n en curso para contactar a un humano. Por favor, completa esa conversaci√≥n o espera.", ephemeral=True)
            return

        # Inicializa el estado de la conversaci√≥n y env√≠a la primera pregunta
        config.user_conversations[user_id] = {'state': 1, 'answers': [], 'channel_id': interaction.channel_id} # Guarda el ID del canal
        await interaction.followup.send(
            "Para poder ayudarte mejor y que un miembro de nuestro equipo te contacte, "
            "por favor, responde a la primera pregunta en este chat:\n\n"
            "**1. ¬øCu√°l es el problema principal que tienes?**",
            ephemeral=False
        )
        print(f"Usuario {interaction.user.name} inici√≥ conversaci√≥n con un humano.")

# Este archivo no necesita una funci√≥n `setup` porque solo contiene clases de vista,
# que ser√°n instanciadas y utilizadas por los cogs o comandos del bot.
