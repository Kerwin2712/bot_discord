# Archivo: views/main_menu.py

import discord
import asyncio
import config # Importa la configuraci√≥n para acceder a user_conversations
# Importamos el DBManager para interactuar con la base de datos de recursos
from database.db_manager import DBManager

# Instancia global del DBManager para ser utilizada por las vistas
db_manager = DBManager()

# La clase CloseTicketView se elimina ya que no se crear√°n nuevos canales de ticket.

class ResourceDisplayView(discord.ui.View):
    """
    Vista para mostrar los recursos finales encontrados.
    """
    def __init__(self, resources: list, current_difficulty: str, current_category: str, current_subcategory: str = None):
        super().__init__(timeout=180) # 3 minutos de timeout
        self.resources = resources
        self.current_difficulty = current_difficulty
        self.current_category = current_category
        self.current_subcategory = current_subcategory
        self.message = None # Para almacenar el mensaje

    async def on_timeout(self):
        """
        Se ejecuta cuando el tiempo de espera de la vista ha expirado.
        Deshabilita todos los botones.
        """
        for item in self.children:
            item.disabled = True
        if self.message:
            try:
                # No eliminar el mensaje, solo deshabilitar los botones
                await self.message.edit(content="La interacci√≥n de recursos ha expirado.", view=self)
            except discord.NotFound:
                print("Mensaje de ResourceDisplayView no encontrado al intentar editar en timeout.")
            except Exception as e:
                print(f"Error al editar mensaje de ResourceDisplayView en timeout: {e}")

    async def send_resources(self, interaction: discord.Interaction):
        """
        Env√≠a el mensaje con los recursos encontrados.
        """
        try:
            if self.resources:
                response_message = f"üìö **Recursos encontrados para '{self.current_category}'"
                if self.current_subcategory:
                    response_message += f" (Subcategor√≠a: '{self.current_subcategory}')"
                response_message += f" (Dificultad: '{self.current_difficulty}'):**\n\n"

                for i, res in enumerate(self.resources):
                    response_message += (
                        f"**{i+1}. {res['resource_name']}**\n"
                        f"   Enlace: <{res['link']}>\n"
                        f"   Categor√≠a: `{res['category']}`\n"
                    )
                    if res['subcategory']:
                        response_message += f"   Subcategor√≠a: `{res['subcategory']}`\n"
                    response_message += f"   Dificultad: `{res['difficulty']}`\n\n"
                
                # Dividir el mensaje si es demasiado largo para Discord
                if len(response_message) > 2000:
                    self.message = await interaction.followup.send(response_message[:1990] + "...\n(Mensaje truncado. Por favor, refina tu b√∫squeda.)", view=self)
                else:
                    self.message = await interaction.followup.send(response_message, view=self)
            else:
                self.message = await interaction.followup.send(
                    f"No se encontraron recursos para la dificultad `{self.current_difficulty}`, "
                    f"categor√≠a `{self.current_category}`"
                    f"{f' y subcategor√≠a `{self.current_subcategory}`' if self.current_subcategory else ''}. "
                    "Intenta con otra selecci√≥n.", ephemeral=False, view=self
                )
        except Exception as e:
            print(f"Error en send_resources: {e}")
            try:
                await interaction.followup.send("‚ùå Ocurri√≥ un error al mostrar los recursos. Intenta de nuevo m√°s tarde.", ephemeral=True)
            except Exception as e_followup:
                print(f"Error al enviar followup en send_resources: {e_followup}")


class SubcategorySelectionView(discord.ui.View):
    """
    Vista para seleccionar una subcategor√≠a de recursos.
    """
    def __init__(self, bot, difficulty: str, category: str):
        super().__init__(timeout=180)
        self.bot = bot
        self.difficulty = difficulty
        self.category = category
        self.message = None

        self._add_subcategory_buttons()

    async def on_timeout(self):
        """
        Se ejecuta cuando el tiempo de espera de la vista ha expirado.
        Deshabilita todos los botones.
        """
        for item in self.children:
            item.disabled = True
        if self.message:
            try:
                # No eliminar el mensaje, solo deshabilitar los botones
                await self.message.edit(content="La interacci√≥n de selecci√≥n de subcategor√≠a ha expirado.", view=self)
            except discord.NotFound:
                print("Mensaje de SubcategorySelectionView no encontrado al intentar editar en timeout.")
            except Exception as e:
                print(f"Error al editar mensaje de SubcategorySelectionView en timeout: {e}")

    def _add_subcategory_buttons(self):
        """A√±ade botones para cada subcategor√≠a disponible."""
        try:
            if not db_manager.connect():
                print("Error: No se pudo conectar a la base de datos para obtener subcategor√≠as.")
                self.add_item(discord.ui.Button(label="Error de DB", style=discord.ButtonStyle.red, disabled=True))
                return

            subcategories = db_manager.get_distinct_subcategories(difficulty=self.difficulty, category=self.category)
            if not subcategories:
                self.add_item(discord.ui.Button(label="No hay subcategor√≠as disponibles", style=discord.ButtonStyle.grey, disabled=True))
                return

            for subcategory in subcategories:
                # Discord tiene un l√≠mite de 25 botones por vista
                if len(self.children) < 25:
                    self.add_item(discord.ui.Button(label=subcategory.title(), style=discord.ButtonStyle.secondary, custom_id=f"subcat_{subcategory}"))
                else:
                    break # Evitar a√±adir m√°s de 25 botones
        except Exception as e:
            print(f"Error en _add_subcategory_buttons: {e}")
            self.add_item(discord.ui.Button(label="Error al cargar subcategor√≠as", style=discord.ButtonStyle.red, disabled=True))


    @discord.ui.button(label="Ver todos los recursos de esta categor√≠a", style=discord.ButtonStyle.primary, custom_id="view_all_in_category", row=4)
    async def view_all_in_category_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """
        Maneja la interacci√≥n para ver todos los recursos de la categor√≠a seleccionada
        sin filtrar por subcategor√≠a.
        """
        try:
            await interaction.response.defer() # Deferir la respuesta para dar tiempo a la DB
            
            resources = db_manager.get_resources(category=self.category, difficulty=self.difficulty)
            
            for item in self.children:
                item.disabled = True
            await interaction.message.edit(content=f"Mostrando recursos para '{self.category}' (Dificultad: '{self.difficulty}').", view=self)

            resource_view = ResourceDisplayView(resources, self.difficulty, self.category)
            await resource_view.send_resources(interaction)
        except Exception as e:
            print(f"Error en view_all_in_category_button: {e}")
            try:
                await interaction.followup.send("‚ùå Ocurri√≥ un error al intentar ver todos los recursos de esta categor√≠a. Intenta de nuevo m√°s tarde.", ephemeral=True)
            except Exception as e_followup:
                print(f"Error al enviar followup en view_all_in_category_button: {e_followup}")


    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        """ Verifica que solo el usuario que inici√≥ la interacci√≥n pueda usar los botones.
            La l√≥gica para los botones de subcategor√≠a se maneja aqu√≠ din√°micamente.
        """
        try:
            if interaction.data and interaction.data.get("custom_id", "").startswith("subcat_"):
                selected_subcategory = interaction.data["custom_id"].replace("subcat_", "")
                await interaction.response.defer() # Deferir la respuesta para dar tiempo a la DB
                resources = db_manager.get_resources(
                    category=self.category,
                    subcategory=selected_subcategory,
                    difficulty=self.difficulty
                )
                for item in self.children:
                    item.disabled = True
                await interaction.message.edit(content=f"Has seleccionado la subcategor√≠a: **{selected_subcategory.title()}** (Categor√≠a: {self.category.title()}, Dificultad: {self.difficulty.title()}).", view=self)
                
                resource_view = ResourceDisplayView(resources, self.difficulty, self.category, selected_subcategory)
                await resource_view.send_resources(interaction)
                return False # No continuar con otros botones en esta interacci√≥n
            return True # Permitir que otros botones se procesen
        except Exception as e:
            print(f"Error en SubcategorySelectionView.interaction_check: {e}")
            try:
                await interaction.followup.send("‚ùå Ocurri√≥ un error al procesar tu selecci√≥n de subcategor√≠a. Intenta de nuevo m√°s tarde.", ephemeral=True)
            except Exception as e_followup:
                print(f"Error al enviar followup en SubcategorySelectionView.interaction_check: {e_followup}")
            return False # Fallar la verificaci√≥n de interacci√≥n si hay un error


class CategorySelectionView(discord.ui.View):
    """
    Vista para seleccionar una categor√≠a de recursos.
    """
    def __init__(self, bot, difficulty: str):
        super().__init__(timeout=180)
        self.bot = bot
        self.difficulty = difficulty
        self.message = None

        self._add_category_buttons()

    async def on_timeout(self):
        """
        Se ejecuta cuando el tiempo de espera de la vista ha expirado.
        Deshabilita todos los botones.
        """
        for item in self.children:
            item.disabled = True
        if self.message:
            try:
                # No eliminar el mensaje, solo deshabilitar los botones
                await self.message.edit(content="La interacci√≥n de selecci√≥n de categor√≠a ha expirado.", view=self)
            except discord.NotFound:
                print("Mensaje de CategorySelectionView no encontrado al intentar editar en timeout.")
            except Exception as e:
                print(f"Error al editar mensaje de CategorySelectionView en timeout: {e}")

    def _add_category_buttons(self):
        """A√±ade botones para cada categor√≠a disponible."""
        try:
            if not db_manager.connect():
                print("Error: No se pudo conectar a la base de datos para obtener categor√≠as.")
                self.add_item(discord.ui.Button(label="Error de DB", style=discord.ButtonStyle.red, disabled=True))
                return

            categories = db_manager.get_distinct_categories(difficulty=self.difficulty)
            if not categories:
                self.add_item(discord.ui.Button(label="No hay categor√≠as disponibles", style=discord.ButtonStyle.grey, disabled=True))
                return

            for category in categories:
                if len(self.children) < 25: # Discord tiene un l√≠mite de 25 botones por vista
                    self.add_item(discord.ui.Button(label=category.title(), style=discord.ButtonStyle.primary, custom_id=f"cat_{category}"))
                else:
                    break
        except Exception as e:
            print(f"Error en _add_category_buttons: {e}")
            self.add_item(discord.ui.Button(label="Error al cargar categor√≠as", style=discord.ButtonStyle.red, disabled=True))


    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        """ Verifica que solo el usuario que inici√≥ la interacci√≥n pueda usar los botones.
            La l√≥gica para los botones de categor√≠a se maneja aqu√≠ din√°micamente.
        """
        try:
            if interaction.data and interaction.data.get("custom_id", "").startswith("cat_"):
                selected_category = interaction.data["custom_id"].replace("cat_", "")
                await interaction.response.defer() # Deferir la respuesta para dar tiempo a la DB
                
                # Obtener subcategor√≠as para la dificultad y categor√≠a seleccionadas
                subcategories = db_manager.get_distinct_subcategories(difficulty=self.difficulty, category=selected_category)
                
                for item in self.children:
                    item.disabled = True
                await interaction.message.edit(content=f"Has seleccionado la categor√≠a: **{selected_category.title()}** (Dificultad: {self.difficulty.title()}).", view=self)

                if subcategories:
                    subcategory_view = SubcategorySelectionView(self.bot, self.difficulty, selected_category)
                    await interaction.followup.send("Por favor, selecciona una subcategor√≠a o ver todos:", view=subcategory_view)
                    subcategory_view.message = interaction.message # Asignar el mensaje para timeout
                else:
                    # Si no hay subcategor√≠as, ir directamente a mostrar recursos de la categor√≠a
                    resources = db_manager.get_resources(category=selected_category, difficulty=self.difficulty)
                    resource_view = ResourceDisplayView(resources, self.difficulty, selected_category)
                    await resource_view.send_resources(interaction)
                return False # No continuar con otros botones en esta interacci√≥n
            return True # Permitir que otros botones se procesen
        except Exception as e:
            print(f"Error en CategorySelectionView.interaction_check: {e}")
            try:
                await interaction.followup.send("‚ùå Ocurri√≥ un error al procesar tu selecci√≥n de categor√≠a. Intenta de nuevo m√°s tarde.", ephemeral=True)
            except Exception as e_followup:
                print(f"Error al enviar followup en CategorySelectionView.interaction_check: {e_followup}")
            return False # Fallar la verificaci√≥n de interacci√≥n si hay un error


class DifficultySelectionView(discord.ui.View):
    """
    Vista para seleccionar la dificultad de los recursos.
    """
    def __init__(self, bot):
        super().__init__(timeout=180) # 3 minutos de timeout
        self.bot = bot
        self.message = None # Para almacenar el mensaje

        self._add_difficulty_buttons()

    async def on_timeout(self):
        """
        Se ejecuta cuando el tiempo de espera de la vista ha expirado.
        Deshabilita todos los botones.
        """
        for item in self.children:
            item.disabled = True
        if self.message:
            try:
                # No eliminar el mensaje, solo deshabilitar los botones
                await self.message.edit(content="La interacci√≥n de selecci√≥n de dificultad ha expirado.", view=self)
            except discord.NotFound:
                print("Mensaje de DifficultySelectionView no encontrado al intentar editar en timeout.")
            except Exception as e:
                print(f"Error al editar mensaje de DifficultySelectionView en timeout: {e}")

    def _add_difficulty_buttons(self):
        """A√±ade botones para cada dificultad disponible."""
        try:
            if not db_manager.connect():
                print("Error: No se pudo conectar a la base de datos para obtener dificultades. Aseg√∫rate de que la DB est√© corriendo y las credenciales sean correctas.")
                self.add_item(discord.ui.Button(label="Error de DB", style=discord.ButtonStyle.red, disabled=True))
                return

            difficulties = db_manager.get_distinct_difficulties()
            print(f"Dificultades obtenidas de la DB: {difficulties}") # DEBUG: Para ver qu√© devuelve la DB
            
            if not difficulties:
                self.add_item(discord.ui.Button(label="No hay dificultades disponibles", style=discord.ButtonStyle.grey, disabled=True))
                return

            for difficulty in difficulties:
                # Discord tiene un l√≠mite de 25 botones por vista
                if len(self.children) < 25:
                    self.add_item(discord.ui.Button(label=difficulty.title(), style=discord.ButtonStyle.primary, custom_id=f"diff_{difficulty}"))
                else:
                    break # Evitar a√±adir m√°s de 25 botones
        except Exception as e:
            print(f"Error en _add_difficulty_buttons: {e}")
            self.add_item(discord.ui.Button(label="Error al cargar dificultades", style=discord.ButtonStyle.red, disabled=True))


    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        """ Verifica que solo el usuario que inici√≥ la interacci√≥n pueda usar los botones.
            La l√≥gica para los botones de dificultad se maneja aqu√≠ din√°micamente.
        """
        try:
            if interaction.data and interaction.data.get("custom_id", "").startswith("diff_"):
                selected_difficulty = interaction.data["custom_id"].replace("diff_", "")
                await interaction.response.defer() # Deferir la respuesta para dar tiempo a la DB
                
                # Deshabilitar los botones de esta vista
                for item in self.children:
                    item.disabled = True
                await interaction.message.edit(content=f"Has seleccionado la dificultad: **{selected_difficulty.title()}**.", view=self)

                # Crear y enviar la siguiente vista de selecci√≥n de categor√≠a
                category_view = CategorySelectionView(self.bot, selected_difficulty)
                await interaction.followup.send("Por favor, selecciona una categor√≠a:", view=category_view)
                category_view.message = interaction.message # Asignar el mensaje para timeout
                return False # No continuar con otros botones en esta interacci√≥n

            return True # Permitir que otros botones se procesen
        except Exception as e:
            print(f"Error en DifficultySelectionView.interaction_check: {e}")
            try:
                await interaction.followup.send("‚ùå Ocurri√≥ un error al procesar tu selecci√≥n de dificultad. Intenta de nuevo m√°s tarde.", ephemeral=True)
            except Exception as e_followup:
                print(f"Error al enviar followup en DifficultySelectionView.interaction_check: {e_followup}")
            return False # Fallar la verificaci√≥n de interacci√≥n si hay un error


class MainMenuView(discord.ui.View):
    """
    Vista del men√∫ principal del bot, presentando opciones iniciales con botones.
    """
    def __init__(self, bot):
        super().__init__(timeout=180) # 3 minutos de timeout para la interacci√≥n
        self.bot = bot
        self.message = None # Para almacenar el mensaje

    async def on_timeout(self):
        """
        Se ejecuta cuando el tiempo de espera de la vista ha expirado.
        Deshabilita todos los botones.
        """
        for item in self.children:
            item.disabled = True
        if self.message:
            try:
                # No eliminar el mensaje, solo deshabilitar los botones
                await self.message.edit(content="La interacci√≥n ha expirado. Puedes usar `&iniciar` para mostrarlo de nuevo.", view=self)
            except discord.NotFound:
                print("Mensaje de MainMenuView no encontrado al intentar editar en timeout.")
            except Exception as e:
                print(f"Error al editar mensaje de MainMenuView en timeout: {e}")

    @discord.ui.button(label="Ayuda T√©cnica", style=discord.ButtonStyle.primary, custom_id="technical_help", emoji="üõ†Ô∏è",
                       row=0)
    async def technical_help_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """
        Maneja la interacci√≥n cuando se hace clic en el bot√≥n 'Ayuda T√©cnica'.
        Inicia el flujo de ayuda t√©cnica directamente en el canal actual.
        """
        try:
            await interaction.response.defer() # Deferir la interacci√≥n para que no expire
            
            # Deshabilitar todos los botones de este mensaje
            for item in self.children:
                item.disabled = True
            await interaction.message.edit(content="Has seleccionado 'Ayuda T√©cnica'. Por favor, describe tu problema t√©cnico aqu√≠ y un miembro de nuestro equipo te ayudar√°.", view=self)
            
            # Obtener el rol de soporte t√©cnico y mencionarlo
            if config.SOPORTE_TECNICO_ROLE_ID:
                support_role = interaction.guild.get_role(config.SOPORTE_TECNICO_ROLE_ID)
                if support_role:
                    await interaction.followup.send(f"{support_role.mention}, un usuario necesita ayuda t√©cnica en este canal. Por favor, revisen la conversaci√≥n.")
                else:
                    await interaction.followup.send("‚ùå Error: No se encontr√≥ el rol de Soporte T√©cnico con el ID configurado. Contacta a un administrador.", ephemeral=True)
            else:
                await interaction.followup.send("‚ùå Error de configuraci√≥n: El ID del rol de Soporte T√©cnico no est√° definido. Contacta a un administrador.", ephemeral=True)
        except Exception as e:
            print(f"Error en technical_help_button: {e}")
            try:
                await interaction.followup.send("‚ùå Ocurri√≥ un error al procesar tu solicitud de ayuda t√©cnica. Intenta de nuevo m√°s tarde.", ephemeral=True)
            except Exception as e_followup:
                print(f"Error al enviar followup en technical_help_button: {e_followup}")


    @discord.ui.button(label="Necesito un Recurso", style=discord.ButtonStyle.success, custom_id="request_resource", emoji="üìö",
                       row=0)
    async def request_resource_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """
        Maneja la interacci√≥n cuando se hace clic en el bot√≥n 'Necesito un Recurso'.
        Inicia el flujo de selecci√≥n de recursos en el canal actual.
        """
        try:
            await interaction.response.defer() # Deferir la interacci√≥n para que no expire

            # Deshabilitar los botones del men√∫ principal para esta interacci√≥n
            for item in self.children:
                item.disabled = True
            await interaction.message.edit(content="Has seleccionado 'Necesito un Recurso'.", view=self)
            
            # Iniciar el flujo de selecci√≥n de recursos en el mismo canal
            difficulty_view = DifficultySelectionView(self.bot)
            await interaction.followup.send("Por favor, selecciona la dificultad del recurso:", view=difficulty_view)
            difficulty_view.message = interaction.message # Asignar el mensaje para timeout
        except Exception as e:
            print(f"Error en request_resource_button: {e}")
            try:
                await interaction.followup.send("‚ùå Ocurri√≥ un error al procesar tu solicitud de recursos. Intenta de nuevo m√°s tarde.", ephemeral=True)
            except Exception as e_followup:
                print(f"Error al enviar followup en request_resource_button: {e_followup}")


    @discord.ui.button(label="Hablar con un Humano", style=discord.ButtonStyle.danger, custom_id="human_contact", emoji="‚ùì", # Cambiado de "üôã" a "‚ùì"
                       row=0)
    async def human_contact_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """
        Maneja la interacci√≥n cuando se hace clic en el bot√≥n 'Hablar con un Humano'.
        Inicia un flujo de preguntas para recopilar informaci√≥n, gestionado por el cog de interacci√≥n humana,
        todo en el canal actual.
        """
        try:
            await interaction.response.defer() # Deferir la interacci√≥n para que no expire

            # Deshabilitar los botones del men√∫ principal para esta interacci√≥n
            for item in self.children:
                item.disabled = True
            await interaction.message.edit(content="Has seleccionado 'Hablar con un Humano'.", view=self)

            user_id = interaction.user.id
            if user_id in config.user_conversations and config.user_conversations[user_id]['state'] != 0:
                await interaction.followup.send("Ya tienes una conversaci√≥n en curso para contactar a un humano. Por favor, completa esa conversaci√≥n o espera.", ephemeral=True)
                return

            # Inicializa el estado de la conversaci√≥n y env√≠a la primera pregunta
            config.user_conversations[user_id] = {'state': 1, 'answers': [], 'channel_id': interaction.channel.id} # Guardar el ID del canal actual
            await interaction.followup.send(
                "Para poder ayudarte mejor y que un miembro de nuestro equipo te contacte, "
                "por favor, responde a la primera pregunta en este chat:\n\n"
                "**1. ¬øCu√°l es el problema principal que tienes?**",
                ephemeral=False
            )
        except Exception as e:
            print(f"Error en human_contact_button: {e}")
            try:
                await interaction.followup.send("‚ùå Ocurri√≥ un error al procesar tu solicitud para hablar con un humano. Intenta de nuevo m√°s tarde.", ephemeral=True)
            except Exception as e_followup:
                print(f"Error al enviar followup en human_contact_button: {e_followup}")

# Este archivo no necesita una funci√≥n `setup` porque solo contiene clases de vista,
# que ser√°n instanciadas y utilizadas por los cogs o comandos del bot.
